// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projectef;

#nullable disable

namespace projectef.Migrations
{
    [DbContext(typeof(TasksContext))]
    [Migration("20240801171816_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projectef.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("8e6fd9a7-1fee-4b87-b724-b2c8b5aa75a0"),
                            Name = "Pending Tasks",
                            Weight = 20
                        },
                        new
                        {
                            CategoryId = new Guid("108e7a15-0cc3-456d-82c3-71e2c0d0b5c6"),
                            Name = "Personal Tasks",
                            Weight = 50
                        });
                });

            modelBuilder.Entity("projectef.Models.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriorityTask")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TaskId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Task", (string)null);

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("26ddde96-39d7-4598-a401-80ed2ea504ce"),
                            CategoryId = new Guid("8e6fd9a7-1fee-4b87-b724-b2c8b5aa75a0"),
                            DateCreated = new DateTime(2024, 8, 1, 12, 18, 15, 740, DateTimeKind.Local).AddTicks(9947),
                            PriorityTask = 1,
                            Title = "Payment Public Services"
                        },
                        new
                        {
                            TaskId = new Guid("6478568f-4f18-4001-8035-98c522b2f03a"),
                            CategoryId = new Guid("108e7a15-0cc3-456d-82c3-71e2c0d0b5c6"),
                            DateCreated = new DateTime(2024, 8, 1, 12, 18, 15, 740, DateTimeKind.Local).AddTicks(9978),
                            PriorityTask = 0,
                            Title = "Complete movie in Netflix"
                        });
                });

            modelBuilder.Entity("projectef.Models.Task", b =>
                {
                    b.HasOne("projectef.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("projectef.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
